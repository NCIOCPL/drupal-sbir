<?php

/**
 * Sends a signal to update the array of fields given.
 * 
 * @param array $fields Fields to be updated.
 */
function sbir_base_update_fields($fields) {

  // For every field, try and create it or update it in the system
  foreach ($fields as $name => $field) {
    // Fields must have a name and type
    if (!array_key_exists('field_name', $field)) {
      drupal_set_message('Field does not have a field_name. Aborting creation of this particular field.', 'error');
      watchdog_exception('error', 'Field does not have field_name defined.');
      continue;
    }
    elseif (!array_key_exists('type', $field)) {
      drupal_set_message('Field "' . $field['field_name'] . '" does not have a type. Aborting creation of this particular field.', 'error');
      watchdog_exception('error', 'Field "' . $field['field_name'] . '" does not have a type defined.');
      continue;
    }

    // Try to update the field if it already exists or try to create it
    try {
      // Setup the field
      $field_info = $field;
      $field_info['field_name'] = $name;
      // If the field exists, update it; Log it
      if (field_read_field($field_info['field_name'])) {
        field_update_field($field_info);
      }
      // If the field doesn't exist, create it; Log it
      else {
        field_create_field($field_info);
      }
    }
    // Log any errors to watchdog and our list of malformed fields
    catch (Exception $e) {
      watchdog_exception('error', $e);
    }
  }
}

/**
 * Updates the given instances.
 * 
 * @param type $fields Fields that are being turned into instances
 * @param type $bundle The content type (bundle) for the instance
 * @param type $entity_type Optional; Assumes node, otherwise an entity type 
 *      should be specified e.g. taxonomy_term
 */
function sbir_base_update_instances($fields, $bundle, $entity_type) {
// For every instance, try and create it or update it in the system
  foreach ($fields as $field) {

// An instance must be created from a field
    if (!array_key_exists('field_name', $field)) {
      drupal_set_message('Field does not have a field_name. Aborting creation of this particular instance.', 'error');
      watchdog_exception('error', 'Field does not have field_name defined.');
      continue;
    }
// Try update the instance if it already exists OR try to create it
    try {
// Set the type to the field so we can check it
      $field['entity_type'] = $entity_type;
// Setup the instance
      $instance = sbir_base_field_instance_info($field, $bundle);

// If the instance exists, update it; Log it
      if (field_read_instance($entity_type, $instance['field_name'], $bundle)) {
        field_update_instance($instance);
      }
// If the instance doesn't exist, create it; Log it
      else {
        field_create_instance($instance);
      }
    }
// Log any errors to watchdog and our list of malformed instances
    catch (Exception $e) {
      watchdog_exception('error', $e);
    }
  }
}

/**
 * Separates our instance definition into one that Drupal would like to read for 
 * a field. (It removes all of the field-specific properties).
 * 
 * @param type $field
 * @param type $bundle
 * @return type 
 */
function sbir_base_field_instance_info($field = array(), $bundle = FALSE) {
  if (empty($field) || !$bundle) {
    return;
  }
  $instance_info = array();
//required instance fields
  $instance_info['field_name'] = $field['field_name'];
  $instance_info['entity_type'] = $field['entity_type'];
  $instance_info['bundle'] = $bundle;

//optional instance fields
  if (array_key_exists('label', $field))
    $instance_info['label'] = $field['label'];

  if (array_key_exists('description', $field))
    $instance_info['description'] = $field['description'];

  if (array_key_exists('required', $field))
    $instance_info['required'] = $field['required'];

  if (array_key_exists('default_value', $field))
    $instance_info['default_value'] = $field['default_value'];

  if (array_key_exists('default_value_function', $field))
    $instance_info['default_value_function'] = $field['default_value_function'];

  if (array_key_exists('settings', $field))
    $instance_info['settings'] = $field['settings'];

  if (array_key_exists('widget', $field))
    $instance_info['widget'] = $field['widget'];

  if (array_key_exists('display', $field))
    $instance_info['display'] = $field['display'];

  return $instance_info;
}

/**
 * Updates the given vocabulary.
 * 
 * @param type $vocabulary: Vocabulary object being created
 */
function sbir_base_update_vocabulary($vocabulary) {
// Try to update the vocabulary if it already exists OR try to create it
  try {
// If the vocabulary exists, update it; Log it (for now just doing nothing)
// Not much that can be updated on a vocabulary, but if there's ever a need we can add
    $vocab = taxonomy_vocabulary_machine_name_load($vocabulary->machine_name);
    if (!empty($vocab)) {
// _update_vocabulary($vocabulary);
    }
// If the vocabulary doesn't exist, create it; Log it
    else {
      taxonomy_vocabulary_save($vocabulary);
    }
  }
// Log any errors to watchdog and our list of malformed instances
  catch (Exception $e) {
    watchdog_exception('error', $e);
  }
}

/**
 * This function will return a vocabulary object which matches the
 * given name. Will return null if no such vocabulary exists.
 *
 * @param String $vocabulary_name
 *   This is the name of the section which is required
 * @return Object
 *   This is the vocabulary object with the name
 *   or null if no such vocabulary exists
 */
function sbir_base_get_vocabulary_by_name($vocabulary_name) {
  $vocabs = taxonomy_get_vocabularies(NULL);
  foreach ($vocabs as $vocab_object) {
    if ($vocab_object->machine_name == $vocabulary_name) {
      return $vocab_object;
    }
  }
  return NULL;
}

/*
 * Convert exported arrays into objects
 */

function sbir_base_convert_array_to_object($array) {
  $object = new stdClass();

  foreach ($array as $key => $value) {
    $object->$key = $value;
  }

  return $object;
}

function sbir_base_create_menu_link($menu_name, $title, $weight, $path, $plid = 0, $is_external = 0, $css_class = '') {
  $menu_link = array(
    'menu_name' => $menu_name,
    'link_path' => $path,
    'link_title' => $title,
    'options' => array(
      'attributes' => array(
        'title' => $title,
      ),
      'item_attributes' => array(
        'id' => '',
        'class' => $css_class,
        'style' => '',
      ),
    ),
    'external' => $is_external,
    'weight' => $weight,
    'hidden' => 0,
    'customized' => 1,
  );

  if (!$is_external) {
    $menu_link['router_path'] = 'node/%';
  }
  else {
    $menu_link['options']['attributes']['rel'] = 'nofollow';
    $menu_link['options']['attributes']['target'] = '_blank';
  }

  $menu_link['plid'] = $plid;

  $plid = menu_link_save($menu_link);

  return $plid;
}

/* Create a nodequeue
 * @param string $name The machine name for the nodequeue
 * @param string $title The display name for the nodequeue
 * @param array $name The node types the can be added
 * to the nodequeue
 */

function sbir_base_create_nodequeue($name, $title, $types) {
  $queue = array(
    'name' => $name,
    'title' => $title,
    'subqueue_title' => '',
    'size' => 0,
    'link' => '',
    'link_remove' => '',
    'owner' => 'nodequeue',
    'show_in_ui' => 1,
    'show_in_tab' => 1,
    'show_in_links' => 0,
    'reference' => 0,
    'reverse' => 0,
    'i18n' => 0,
    'subqueues' => 1,
    'types' => $types,
    'roles' => array(),
    'count' => 0,
    'add_subqueue' => array(
      1 => $title,
    )
  );

  $object = sbir_base_convert_array_to_object($queue);

  $qid = nodequeue_save($object);

  return $qid;
}

// Add nodes to a given nodequeue
function sbir_base_add_items_to_subqueue($qid, $nodequeue_items) {

  $nodequeue = nodequeue_load($qid);
  $subqueue = nodequeue_load_subqueues_by_queue($qid);

  foreach ($nodequeue_items as $nodequeue_item) {
    nodequeue_subqueue_add($nodequeue, $subqueue[$qid], $nodequeue_item);
  }
}

/**
 * Method that updates the block specified by module.delta name.  Providing only
 * the module and delta parameters will disable the block for the default nhlbitheme
 * @param type $module The module owning/that created the block
 * @param type $delta The machine name of the block
 * @param type $title The blocks title when it is displayed on a page
 * @param type $status Enabled = 1, disabled = 0
 * @param type $region The theme region to display the block in; -1 is disabled
 * @param type $weight The order in which the block displays in the assigned region
 * @param type $theme The theme inwhich to apply this change; Every block has a unique
 * instance for each enabled theme
 */
function update_sbir_block($module, $delta, $title = '', $status = 0, $region = -1, $weight = 0) {
  db_update('block')
      ->fields(array(
        'status' => $status,
        'weight' => $weight,
        'region' => $region,
        'title' => $title,
      ))
      ->condition('module', $module)
      ->condition('delta', $delta)
      ->execute();
}